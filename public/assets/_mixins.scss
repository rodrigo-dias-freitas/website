
@mixin text-style($size, $weight, $line-height: null, $italic: false) {
  font-family: $primary-font;
  font-size: map-get($font-sizes, $size);
  font-weight: map-get($font-weights, $weight);
  font-style: if($italic, italic, normal);
  @if $line-height != null {
    line-height: $line-height;
  }
}
$font-roles: (
  display-large: (weight: light, lh: 4rem),
  display-medium: (weight: regular, lh: 3.25rem),
  display-small: (weight: regular, lh: 2.75rem),
  headline-large: (weight: medium, lh: 2.5rem),
  headline-medium: (weight: medium, lh: 2.25rem),
  headline-small: (weight: medium, lh: 2rem),
  title-large: (weight: medium, lh: 1.75rem),
  title-medium: (weight: medium, lh: 1.5rem),
  title-small: (weight: medium, lh: 1.25rem),
  body-large: (weight: regular, lh: 1.5rem),
  body-medium: (weight: regular, lh: 1.25rem),
  body-small: (weight: regular, lh: 1rem),
  label-large: (weight: medium, lh: 1.25rem),
  label-medium: (weight: medium, lh: 1rem),
  label-small: (weight: medium, lh: 1rem)
);

@each $name, $style in $font-roles {
  .#{$name} {
    @include text-style($name, map-get($style, weight), map-get($style, lh));
  }
}

// Gerar classes de background e texto dinamicamente para todos os grupos de cores
@each $group, $colors in $color-groups {
  @each $shade, $value in $colors {
    .bg-#{$group}-#{$shade} {
      background-color: $value;
    }

    .text-#{$group}-#{$shade} {
      color: $value;
    }

    .border-#{$group}-#{$shade} {
      border-color: $value;
    }
  }
}

$themes: (
  light: (
    background: map-get($color-groups, background),
    text: map-get($color-groups, neutral)
  ),
  dark: (
    background: (
      100: #000000,
      200: #1a1a1a
    ),
    text: (
      100: #f2f2f2,
      200: #cccccc
    )
  )
);

  
@mixin button-variant($name, $color-group, $normal, $hover, $focus, $size) {
  .rdf__button-#{$name}-#{$size} {
    background-color: get-color($color-group, $normal);
    color: get-color(background, 100); // texto branco ou claro

    &:hover {
      background-color: get-color($color-group, $hover);
    }

    &:focus {
      background-color: get-color($color-group, $focus);
    }

    padding: 0.5rem 1.25rem;
    border-radius: 0.375rem;
    border: none;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
  }
}




@mixin button-size($size) {
  @if $size == 'small' {
    font-size: 0.75rem;
    padding: 0.25rem 0.75rem;
  } @else if $size == 'medium' {
    font-size: 1rem;
    padding: 0.5rem 1.25rem;
  } @else if $size == 'large' {
    font-size: 1.25rem;
    padding: 0.75rem 1.75rem;
  }
}

@each $variant, $group in $color-groups {
  @each $size in ('small', 'medium', 'large') {
    .rdf__button-#{$variant}-#{$size} {
      @extend .bg-#{$variant}-100;
      @extend .text-background-100;
      border: none;
      border-radius: 0.375rem;
      cursor: pointer;
      transition: background-color 0.2s ease-in-out;
      font-weight: 500;

      @include button-size($size);

      // hover e focus direto na classe
      &:hover {
        background-color: map-get($group, 200);
      }
      &:focus {
        background-color: map-get($group, 300);
        outline: none; // ou estilo de foco que preferir
      }
    }
  }
}

// Extras (opcional)
.btn-cancel {
  background-color: #ccc;
  color: #000;
}

.btn-delete {
  background-color: #e00;
  color: #fff;
}
